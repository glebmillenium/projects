package Graph;

import java.awt.*;
import javax.swing.JPanel;

/**
 *
 * @author student
 */
public class GraphFrame extends javax.swing.JFrame {

    /**
     * Creates new form GraphFrame
     */
    private JPanel_modif Panel = new JPanel_modif(300,520);
    public GraphFrame() {
        initComponents();
        paintPanel();
    }
    
    public void paintPanel()
    {
        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(Panel);
        Panel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
            .addGap(0, 520, Short.MAX_VALUE)
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(112, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );

        pack();
    }
      
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TextField = new javax.swing.JTextField();
        Label = new javax.swing.JLabel();
        Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Label.setText("f(x, y)     =");

        Button.setText("Построить!");
        Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(6, 6, 6)
                .add(Label)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(TextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 293, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(38, 38, 38)
                .add(Button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 129, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(361, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(TextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(Label)
                    .add(Button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(639, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        AGV.windowClose(evt);
    }//GEN-LAST:event_formWindowClosing

    private void ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonActionPerformed
        
    }//GEN-LAST:event_ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphFrame().setVisible(true);
            }
        });
    }
    
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button;
    private javax.swing.JLabel Label;
    private javax.swing.JTextField TextField;
    // End of variables declaration//GEN-END:variables

    class JPanel_modif extends javax.swing.JPanel {

        private int width;
        private int height;
        private int[] centr = new int[2];
        private int[] arrayX;
        private int[] arrayY;
        
        JPanel_modif(int h, int w) {            
            this.width = w;
            this.height = h;
            this.centr[0] = w/2;
            this.centr[1] = h/2;
        }

        @Override
        @SuppressWarnings("empty-statement")
        public void paintComponent(Graphics g) {
            
            super.paintComponent(g);
            
            g.drawString("O", 240, 170);
            g.drawString("x", 500, 170);
            g.drawString("y", 270, 10);
            
            g.drawLine(this.centr[0], 0, this.centr[0], this.height);
            g.drawLine(this.centr[0], 0, this.centr[0]-5, 0+10);
            g.drawLine(this.centr[0], 0, this.centr[0]+5, 0+10);
            
            g.drawLine(0, this.centr[1], this.width, this.centr[1]);
            g.drawLine(this.width, this.centr[1], this.width-10, this.centr[1]+5);
            g.drawLine(this.width, this.centr[1], this.width-10, this.centr[1]-5);
            
            
            Polygon poly = new Polygon(this.arrayX, this.arrayY, this.arrayX.length);
            g.drawPolygon(poly);        
        }
        
        /*public void paint(Graphics g)
-            {
-                    g.drawLine(20, 20, 360, 20);
-                    Color oldColor = g.getColor();
-                    Color newColor = new Color(0, 0, 255);
-                    g.setColor(newColor);
-                    g.drawLine(20, 30, 360, 30);
-                    g.setColor(oldColor);
-                    g.drawRect(20, 40, 340, 20);
-                    newColor = new Color(0, 215, 255);
-                    g.setColor(newColor);
-                    g.fillRect(21, 41, 339, 19);
-                    g.setColor(oldColor);
-                    g.drawRoundRect(20, 70, 340, 30, 20, 15);
-                    g.drawOval(20, 110, 150, 60);
-                    g.drawOval(200, 110, 60, 60);
-                    g.drawArc(280, 110, 80, 60, 0, 180);
-                    int[] arrayX = {20, 100, 100, 250, 250, 20, 20, 50};
-                    int[] arrayY = {180, 180, 200, 200, 220, 200, 200, 190};
-                    Polygon poly = new Polygon(arrayX, arrayY, 8);
-                    g.drawPolygon(poly);
-                    Point aPoint = new Point(50, 190);
-                    if(poly.contains(aPoint))
-                    {
-                            g.drawString("Yes", 50, 190);
-                    }
-                    newColor = new Color(0, 0, 255);
-                    g.setColor(newColor);
-                    Font font = new Font("Tahoma", Font.BOLD|Font.ITALIC, 40);
-                    Font oldFont = g.getFont();
-                    g.setFont(font);
-                    g.drawString("SBP", 270, 220);
-                    g.setFont(oldFont);
-                    g.setColor(oldColor);
-                    // Draw axes;
-                    g.drawLine(20, 220, 20, 350);
-                    g.drawLine(20, 350, 360, 350);
-                    g.drawString("Y", 25, 230);
-                    g.drawString("X", 350, 346);		
-                    // Draw a curve;
-                    int[] xArray = {20, 40, 60, 80, 100, 120, 130, 140, 280, 332};
-                    int[] yArray = {350, 345, 340, 310, 290, 280, 275, 273, 271, 269};
-                    int nPoint = 10;
-                    g.setColor(newColor);
-                    g.drawPolyline(xArray, yArray, nPoint);
-                    g.setColor(oldColor);
-                    g.drawString("y = f(x)", 180, 267);
-            }*/
    }

}

